definitions:
  controller.AuthResponse:
    properties:
      message:
        type: string
      token:
        type: string
      type:
        example: basic,oauth2
        type: string
      username:
        type: string
    type: object
  controller.FailureResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  controller.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  model.ConnectCreateRequest:
    properties:
      friend_id:
        type: string
    required:
    - friend_id
    type: object
  model.ConnectUpdateRequest:
    properties:
      status:
        $ref: '#/definitions/model.RequestStatus'
    required:
    - status
    type: object
  model.DisconnectRequest:
    properties:
      friend_id:
        type: string
    required:
    - friend_id
    type: object
  model.EraCreateRequest:
    properties:
      color:
        type: string
      name:
        type: string
      time_end:
        type: string
      time_start:
        type: string
    type: object
  model.EraUpdateRequest:
    properties:
      color:
        type: string
      id:
        type: integer
      name:
        type: string
      time_end:
        type: string
      time_start:
        type: string
    type: object
  model.EventCreateRequest:
    properties:
      date:
        type: string
      description:
        type: string
      items:
        items:
          $ref: '#/definitions/model.EventItem'
        type: array
      name:
        type: string
      time_end:
        type: string
      time_start:
        type: string
      visibility:
        $ref: '#/definitions/model.Visibility'
    type: object
  model.EventItem:
    properties:
      data:
        type: string
      type:
        $ref: '#/definitions/model.EventType'
    type: object
  model.EventType:
    enum:
    - 10
    - 11
    - 12
    - 13
    type: integer
    x-enum-varnames:
    - EventTypeString
    - EventTypePhoto
    - EventTypeVideo
    - EventTypeVoiceRecord
  model.EventUpdateRequest:
    properties:
      date:
        type: string
      description:
        type: string
      id:
        type: integer
      items:
        items:
          $ref: '#/definitions/model.EventItem'
        type: array
      name:
        type: string
      time_end:
        type: string
      time_start:
        type: string
      visibility:
        $ref: '#/definitions/model.Visibility'
    type: object
  model.Login:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  model.Register:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      password:
        type: string
      role_id:
        type: integer
      username:
        type: string
    required:
    - confirm_password
    - password
    - username
    type: object
  model.RequestStatus:
    enum:
    - 100
    - 101
    - 102
    type: integer
    x-enum-varnames:
    - RequestStatusPending
    - RequestStatusApproved
    - RequestStatusRejected
  model.UserCreateRequest:
    properties:
      email:
        type: string
      password:
        type: string
      role_id:
        type: integer
      username:
        type: string
    required:
    - email
    - password
    - role_id
    - username
    type: object
  model.Visibility:
    enum:
    - 1
    - 2
    - 3
    type: integer
    x-enum-varnames:
    - EventVisibilityPublic
    - EventVisibilityPrivate
    - EventVisibilityJustMe
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: This endpoint allows a user to log in by providing a valid username
        and password.
      parameters:
      - description: User login input
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.Login'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged in with JWT token
          schema:
            $ref: '#/definitions/controller.AuthResponse'
        "400":
          description: Error message including details on failure
          schema:
            $ref: '#/definitions/controller.FailureResponse'
        "500":
          description: Interval error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: User login
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: This endpoint allows a user to log in by providing a valid username
        and password.
      parameters:
      - description: User register input
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.Register'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully registered in with JWT token
          schema:
            $ref: '#/definitions/controller.AuthResponse'
        "400":
          description: Error message including details on failure
          schema:
            $ref: '#/definitions/controller.FailureResponse'
        "500":
          description: Interval error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: User register
      tags:
      - auth
  /connects:
    post:
      consumes:
      - application/json
      description: This endpoint creates a new connection by binding the incoming
        JSON request to the ConnectCreateRequest model.
      parameters:
      - description: Connect creation input
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.ConnectCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Connect created successfully
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/controller.FailureResponse'
        "500":
          description: Connect creation failed
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Create creates a new connection
      tags:
      - connects
  /connects/{id}:
    patch:
      consumes:
      - application/json
      description: This endpoint updates a connection by binding the incoming JSON
        request to the ConnectUpdateRequest model.
      parameters:
      - description: Connection ID to update,approved:101, rejected:102
        in: path
        name: id
        required: true
        type: string
      - description: Connect update input
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.ConnectUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Connect updated successfully
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/controller.FailureResponse'
        "500":
          description: Connect update failed
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Update updates an existing connection
      tags:
      - connects
  /connects/{user_id}:
    get:
      consumes:
      - application/json
      description: Retrieves a filtered and paginated list of connects based on query
        parameters.
      parameters:
      - description: Limit the number of connects returned
        in: query
        name: limit
        type: string
      - description: Number of connects to skip for pagination
        in: query
        name: skip
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response containing the list of connects
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: List all connects
      tags:
      - connects
  /connects/disconnect:
    patch:
      consumes:
      - application/json
      description: This endpoint disconnects an existing connection by binding the
        incoming JSON request to the DisconnectRequest model.
      parameters:
      - description: Disconnect input
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.DisconnectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Disconnected successfully
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/controller.FailureResponse'
        "500":
          description: Disconnect failed
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Disconnects an existing connection
      tags:
      - connects
  /eras:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves a list of eras.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        type: string
      - description: Filter eras by name
        in: query
        name: name
        type: string
      - description: Filter eras by user id
        in: query
        name: user_id
        type: string
      - description: Limit the number of connects returned
        in: query
        name: limit
        type: string
      - description: Number of connects to skip for pagination
        in: query
        name: skip
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Eras retrieved successfully
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/controller.FailureResponse'
        "500":
          description: Era retrieval failed
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: Retrieve a list of eras
      tags:
      - eras
    post:
      consumes:
      - application/json
      description: This endpoint creates a new era by binding the incoming JSON request
        to the EraCreateRequest model.
      parameters:
      - description: Era creation input
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.EraCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Era created successfully
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/controller.FailureResponse'
        "500":
          description: Era creation failed
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new era
      tags:
      - eras
  /eras/{id}:
    delete:
      consumes:
      - application/json
      description: This endpoint deletes an existing era by providing era name or
        UID.
      parameters:
      - description: Era name or UID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Era deleted successfully
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/controller.FailureResponse'
        "500":
          description: Era delete failed
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete an existing era
      tags:
      - eras
    get:
      consumes:
      - application/json
      description: Fetches an era by its unique name or UID from the database.
      parameters:
      - description: Era name or UID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Era retrieved successfully
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/controller.FailureResponse'
        "500":
          description: Era retrieval failed
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Retrieve era by ID
      tags:
      - eras
    patch:
      consumes:
      - application/json
      description: This endpoint updates an existing era by binding the incoming JSON
        request to the EraUpdateRequest model.
      parameters:
      - description: Era update input
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.EraUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Era updated successfully
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/controller.FailureResponse'
        "500":
          description: Era update failed
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Update an existing era
      tags:
      - eras
  /events:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves a list of events.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        type: string
      - description: Filter events by user id, returns owners events if not provided
        in: query
        name: user_id
        type: string
      - description: Filter events by visibility status (public:1, private:2, just
          me:3)
        in: query
        name: visibility
        type: string
      - description: Limit the number of events returned
        in: query
        name: limit
        type: string
      - description: Number of events to skip for pagination
        in: query
        name: skip
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Events retrieved successfully
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/controller.FailureResponse'
        "500":
          description: Event retrieval failed
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      summary: Retrieve a list of events
      tags:
      - events
    post:
      consumes:
      - application/json
      description: This endpoint creates a new event by binding the incoming JSON
        request to the EventCreateRequest model.
      parameters:
      - description: Event creation input
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.EventCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Event created successfully
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/controller.FailureResponse'
        "500":
          description: Event creation failed
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new event
      tags:
      - events
  /events/{id}:
    delete:
      consumes:
      - application/json
      description: This endpoint deletes an existing event by providing event name
        or UID.
      parameters:
      - description: Event name or UID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Event deleted successfully
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/controller.FailureResponse'
        "500":
          description: Event delete failed
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete an existing event
      tags:
      - events
    get:
      consumes:
      - application/json
      description: Fetches an event by its unique name or UID from the database.
      parameters:
      - description: Event name or UID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Event retrieved successfully
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/controller.FailureResponse'
        "500":
          description: Event retrieval failed
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Retrieve event by ID
      tags:
      - events
    patch:
      consumes:
      - application/json
      description: This endpoint updates an existing event by binding the incoming
        JSON request to the EventUpdateRequest model.
      parameters:
      - description: Event update input
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.EventUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Event updated successfully
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/controller.FailureResponse'
        "500":
          description: Event update failed
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Update an existing event
      tags:
      - events
  /users:
    get:
      consumes:
      - application/json
      description: Retrieves a filtered and paginated list of users from the database
        based on query parameters.
      parameters:
      - description: Filter users by username
        in: query
        name: username
        type: string
      - description: Filter users by email
        in: query
        name: email
        type: string
      - description: Filter users by role ID
        in: query
        name: role_id
        type: string
      - description: Limit the number of users returned
        in: query
        name: limit
        type: string
      - description: Number of users to skip for pagination
        in: query
        name: skip
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response containing the list of users
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "500":
          description: Interval error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: List all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: This endpoint creates a new user by providing username, email,
        password, and role ID.
      parameters:
      - description: User creation input
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.UserCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: user username
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: Error message including details on failure
          schema:
            $ref: '#/definitions/controller.FailureResponse'
        "500":
          description: Interval error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Create creates a new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: This endpoint deletes a user by providing user id.
      produces:
      - application/json
      responses:
        "200":
          description: user username
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "500":
          description: Interval error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: DeleteUser deletes an existing user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Fetches a user by their unique ID from the database.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response containing the user information
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Retrieve user by ID
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: This endpoint updates a user by providing username, email, password,
        and role ID.
      parameters:
      - description: User update input
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.UserCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: user username
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: Error message including details on failure
          schema:
            $ref: '#/definitions/controller.FailureResponse'
        "500":
          description: Interval error
          schema:
            $ref: '#/definitions/controller.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: UpdateUser updates an existing user
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    description: Type \"Bearer \" and then your API Token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
