{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/auth/forgot-password": {
            "post": {
                "description": "This endpoint allows a user to request a password reset by providing their email.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Forgot password",
                "parameters": [
                    {
                        "description": "Forgot password input",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ForgotPassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset email sent",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Error message including details on failure",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "This endpoint allows a user to log in by providing a valid username and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "User login input",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully logged in with JWT token",
                        "schema": {
                            "$ref": "#/definitions/controller.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Error message including details on failure",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "This endpoint allows a user to log in by providing a valid username and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User register",
                "parameters": [
                    {
                        "description": "User register input",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Register"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully registered in with JWT token",
                        "schema": {
                            "$ref": "#/definitions/controller.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Error message including details on failure",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/auth/reset-password": {
            "post": {
                "description": "This endpoint allows a user to reset their password using a valid reset token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "description": "Reset password input",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ResetPassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset successful",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Error message including details on failure",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/connects": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint creates a new connection by binding the incoming JSON request to the ConnectCreateInput model.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connects"
                ],
                "summary": "Create creates a new connection",
                "parameters": [
                    {
                        "description": "Connect creation input",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ConnectCreateInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Connect created successfully",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Connect creation failed",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/connects/{id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint deletes a connection by binding the incoming JSON request to the ConnectUpdateInput model.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connects"
                ],
                "summary": "Delete deletes an existing connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Connection ID to delete",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Connect deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Connect update failed",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint updates a connection by binding the incoming JSON request to the ConnectUpdateInput model.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connects"
                ],
                "summary": "Update updates an existing connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Connection ID to update,approved:101, rejected:102",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Connect update input",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ConnectUpdateInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Connect updated successfully",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Connect update failed",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/eras": {
            "get": {
                "description": "This endpoint retrieves a list of eras.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "eras"
                ],
                "summary": "Retrieve a list of eras",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "example": "eq:test",
                        "description": "Filter eras by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "eq:1",
                        "description": "Filter eras by user id",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Limit the number of connects returned",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Number of connects to skip for pagination",
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "desc:created_at",
                        "description": "Order by column (prefix with asc: or desc:)",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Eras retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Era retrieval failed",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint creates a new era by binding the incoming JSON request to the EraCreateInput model.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "eras"
                ],
                "summary": "Create a new era",
                "parameters": [
                    {
                        "description": "Era creation input",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.EraCreateInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Era created successfully",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Era creation failed",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/eras/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches an era by its unique name or UID from the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "eras"
                ],
                "summary": "Retrieve era by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Era name or UID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Era retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Era retrieval failed",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint deletes an existing era by providing era name or UID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "eras"
                ],
                "summary": "Delete an existing era",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Era name or UID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Era deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Era delete failed",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint updates an existing era by binding the incoming JSON request to the EraUpdateInput model.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "eras"
                ],
                "summary": "Update an existing era",
                "parameters": [
                    {
                        "description": "Era update input",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.EraUpdateInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Era updated successfully",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Era update failed",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/events": {
            "get": {
                "description": "This endpoint retrieves a list of events.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Retrieve a list of events",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "example": "eq:1",
                        "description": "Filter events by user id, returns owners events if not provided",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "eq:1",
                        "description": "Filter events by visibility status (public:1, private:2, just me:3)",
                        "name": "visibility",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "10",
                        "description": "Limit the number of events returned",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "0",
                        "description": "Number of events to skip for pagination",
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "desc:created_at",
                        "description": "Order by column (prefix with asc: or desc:)",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Events retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Event retrieval failed",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint creates a new event by binding the incoming JSON request to the EventCreateInput model.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Create a new event",
                "parameters": [
                    {
                        "description": "Event creation input",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.EventCreateInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Event created successfully",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Event creation failed",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/events/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches an event by its unique name or UID from the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Retrieve event by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event name or UID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Event retrieval failed",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint deletes an existing event by providing event name or UID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Delete an existing event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event name or UID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Event delete failed",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint updates an existing event by binding the incoming JSON request to the EventUpdateInput model.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Update an existing event",
                "parameters": [
                    {
                        "description": "Event update input",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.EventUpdateInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event updated successfully",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Event update failed",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/notifications": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a filtered and paginated list of notifications based on query parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "List lists all notifications",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter notifications by user id if you are admin",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter notifications by read status",
                        "name": "read",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Limit the number of notifications returned",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Number of notifications to skip for pagination",
                        "name": "skip",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response containing the list of notifications",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/notifications/{id}": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint updates a notification by binding the incoming JSON request to the NotificationUpdateInput model.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Update updates an existing notification",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Notification ID to update",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Notification update input",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.NotificationUpdateInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notification updated successfully",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Notification update failed",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a filtered and paginated list of users from the database based on query parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "List all users",
                "parameters": [
                    {
                        "type": "string",
                        "example": "eq:test",
                        "description": "Filter users by username",
                        "name": "username",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "eq:test@test.com",
                        "description": "Filter users by email",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "eq:1",
                        "description": "Filter users by role ID",
                        "name": "role_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "10",
                        "description": "Limit the number of users returned",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "0",
                        "description": "Number of users to skip for pagination",
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "desc:created_at",
                        "description": "Order by column (prefix with asc: or desc:)",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response containing the list of users",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint creates a new user by providing username, email, password, and role ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create creates a new user",
                "parameters": [
                    {
                        "description": "User creation input",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserCreateInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "user username",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Error message including details on failure",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/users/search": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a filtered and paginated list of users from the database based on query parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Search all users",
                "parameters": [
                    {
                        "type": "string",
                        "example": "eq:test",
                        "description": "Filter users by username",
                        "name": "q",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "10",
                        "description": "Limit the number of users returned",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "0",
                        "description": "Number of users to skip for pagination",
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "desc:created_at",
                        "description": "Order by column (prefix with asc: or desc:)",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response containing the list of users",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a user by their unique ID from the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Retrieve user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response containing the user information",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint deletes a user by providing user id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "DeleteUser deletes an existing user",
                "responses": {
                    "200": {
                        "description": "user username",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint updates a user by providing username, email, password, and role ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update updates an existing user",
                "parameters": [
                    {
                        "description": "User update input",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserCreateInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user username",
                        "schema": {
                            "$ref": "#/definitions/controller.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Error message including details on failure",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Interval error",
                        "schema": {
                            "$ref": "#/definitions/controller.FailureResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.AuthResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "example": "basic,oauth2"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "controller.FailureResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "controller.SuccessListResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "limit": {
                    "type": "integer"
                },
                "skip": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "controller.SuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "model.ConnectCreateInput": {
            "type": "object",
            "required": [
                "friend_id"
            ],
            "properties": {
                "friend_id": {
                    "type": "string"
                }
            }
        },
        "model.ConnectUpdateInput": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "$ref": "#/definitions/model.RequestStatus"
                }
            }
        },
        "model.EraCreateInput": {
            "type": "object",
            "required": [
                "color"
            ],
            "properties": {
                "color": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "time_end": {
                    "type": "string"
                },
                "time_start": {
                    "type": "string"
                }
            }
        },
        "model.EraUpdateInput": {
            "type": "object",
            "required": [
                "color"
            ],
            "properties": {
                "color": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "time_end": {
                    "type": "string"
                },
                "time_start": {
                    "type": "string"
                }
            }
        },
        "model.EventCreateInput": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "date": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.EventItem"
                    }
                },
                "name": {
                    "type": "string"
                },
                "time_end": {
                    "type": "string"
                },
                "time_start": {
                    "type": "string"
                },
                "visibility": {
                    "$ref": "#/definitions/model.Visibility"
                }
            }
        },
        "model.EventItem": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/model.EventType"
                }
            }
        },
        "model.EventType": {
            "type": "integer",
            "enum": [
                10,
                11,
                12,
                13
            ],
            "x-enum-varnames": [
                "EventTypeString",
                "EventTypePhoto",
                "EventTypeVideo",
                "EventTypeVoiceRecord"
            ]
        },
        "model.EventUpdateInput": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "date": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.EventItem"
                    }
                },
                "name": {
                    "type": "string"
                },
                "time_end": {
                    "type": "string"
                },
                "time_start": {
                    "type": "string"
                },
                "visibility": {
                    "$ref": "#/definitions/model.Visibility"
                }
            }
        },
        "model.ForgotPassword": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "model.Login": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.NotificationStatus": {
            "type": "integer",
            "enum": [
                100,
                101
            ],
            "x-enum-varnames": [
                "NotificationStatusUnread",
                "NotificationStatusRead"
            ]
        },
        "model.NotificationUpdateInput": {
            "type": "object",
            "properties": {
                "read": {
                    "$ref": "#/definitions/model.NotificationStatus"
                }
            }
        },
        "model.Register": {
            "type": "object",
            "required": [
                "confirm_password",
                "password",
                "username"
            ],
            "properties": {
                "confirm_password": {
                    "type": "string"
                },
                "password": {
                    "description": "Email           string `json:\"email\" validate:\"email\"`",
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.RequestStatus": {
            "type": "integer",
            "enum": [
                100,
                101,
                102
            ],
            "x-enum-varnames": [
                "RequestStatusPending",
                "RequestStatusApproved",
                "RequestStatusRejected"
            ]
        },
        "model.ResetPassword": {
            "type": "object",
            "required": [
                "confirm_password",
                "new_password",
                "token"
            ],
            "properties": {
                "confirm_password": {
                    "type": "string"
                },
                "new_password": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "model.UserCreateInput": {
            "type": "object",
            "required": [
                "confirm_password",
                "email",
                "password",
                "username"
            ],
            "properties": {
                "confirm_password": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.Visibility": {
            "type": "integer",
            "enum": [
                1,
                2,
                3
            ],
            "x-enum-varnames": [
                "EventVisibilityPublic",
                "EventVisibilityPrivate",
                "EventVisibilityJustMe"
            ]
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Type \\\"Bearer \\\" and then your API Token",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}